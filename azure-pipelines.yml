trigger: none
variables:
 TF_VAR_VMNAME : myvmlogin 
 TF_VAR_SLOGIN : mysqllogin


parameters:
  - name: actionToPerform
    displayName: "Deploy/Destroy"
    type: string
    default: Deploy
    values: [Deploy , Destroy]

stages:
  - stage: build
    pool: 
     vmImage: windows-latest
    jobs:
      - job: build
        steps:
          - task: CopyFiles@2
            inputs:
              SourceFolder: 'TF-files'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
  - stage: deployInfra
    condition: eq('${{ parameters.actionToPerform }}', 'Deploy')
    
    
    pool: 
     vmImage: windows-latest
    jobs:
      - job: deploy
        steps: 
         - task: DownloadBuildArtifacts@1
           inputs:
             buildType: 'current'
             downloadType: 'single'
             artifactName: 'drop'
             downloadPath: '$(System.ArtifactsDirectory)'
         
         - task:  ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
           displayName: InstallTerraform
           inputs:
            terraformVersion: '1.3.9'

         - task: TerraformTaskV4@4
           displayName: TFInit
           inputs:
             provider: 'azurerm'
             command: 'init'
             workingDirectory: '$(System.DefaultWorkingDirectory)/TF-files' ## check working directory
             backendServiceArm: 'serviceconn1'
             backendAzureRmResourceGroupName: 'basava' ## check name  befrom deploy
             backendAzureRmStorageAccountName: 'casestudy2sa1'
             backendAzureRmContainerName: 'container12'
             backendAzureRmKey: 'terraform.tfstate'
         
           
         - task: TerraformTaskV4@4
           displayName: TFPlan
           inputs:
             provider: 'azurerm'
             command: 'plan'
             workingDirectory: '$(System.DefaultWorkingDirectory)/TF-files' ## check working directory
             commandOptions: '-input=true' 
             environmentServiceNameAzureRM: 'serviceconn1'

         - task: TerraformTaskV4@4
           inputs:
             provider: 'azurerm'
             command: 'apply'
             workingDirectory: '$(System.DefaultWorkingDirectory)/TF-files' ## check working directory
             environmentServiceNameAzureRM: 'serviceconn1'
        
  - stage: destroyInfra
    condition: eq('${{ parameters.actionToPerform}}', 'Destroy')            
    jobs:
      - job: 
        steps: 
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1  
          inputs:
            terraformVersion: 'latest'

        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/TF-files' ## check working directory
            backendServiceArm: 'serviceconn1'
            backendAzureRmResourceGroupName: 'basava' 
            backendAzureRmStorageAccountName: 'casestudy2sa1' ## check name  befrom deploy
            backendAzureRmContainerName: 'container12'
            backendAzureRmKey: 'terraform.tfstate'

        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'destroy'
            workingDirectory: '$(System.DefaultWorkingDirectory)/TF-files' ## check working directory
            environmentServiceNameAzureRM: 'serviceconn1'

